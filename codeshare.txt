



https://github.com/giridhar276/lightnwonder


name = "python programming"
print(name)
# string[start:stop:step]
print("I love",name)
print(name[0])
print(name[1])
print(name[0:8])
print(name[8:11])
print(name[0:18])
print(name[0:18:2])  # p t  o   r g a
print(name[8:14:3])
print(name[:])  #  print(name)  #print(name[0:])
print(name[::])
print(name[-1])
print(name[-5:-2]) # m
print(name[::-1])


print(name.capitalize())
print(name.title())
print(name.count("p"))
print(name.split(" "))
print(name.split("p"))
print(name.endswith("g"))
print(name.endswith("m"))
print(name.startswith("p"))
print(name.split(" "))
print(name.replace("python","ruby"))
print(name.center(40)) 
print(name.center(40,"*")) 
print(name.find("in")) # it returns index if substring found
                      # if not found ... it returns -1

print(name.isupper())
print(name.islower())
print(name.isalpha())

aname = " python  "
print(len(aname.strip())) # remove whitespaces at both ends
print(len(aname.rstrip()))
print(len(aname.lstrip()))

aname = "I love {} and {}" # template
print(aname.format("python","datascience"))
# simple if
if name.isupper():
    print("string is upper")
    print("inside if")
    print("still inside if")

# if-else
if name.isupper():
    print("string is upper")
    print("inside if")
    print("still inside if")
else:
    print("string is lower")
    print("inside else")









alist = [10,5,43,56,34,5,43]
alist.append(100)
print("After appending:",alist)
alist.extend([51,93,34])
print("AFter extending:",alist)
alist.insert(1,120)
print("After insering:",alist)
# value at that index will be removed
alist.pop(1) # 1 is the index
print("After pop:",alist)
# will remove the value directly
if 193 in alist:
    alist.remove(193)
else:
    print("value is not found")

alist.reverse()  # reversing list elements
print("Reversing:",alist)
alist.sort()  # ascending order
print("After sorting :",alist)
alist.sort(reverse=True)# descending order
print("After sorting:",alist)








book = {"chap1":10,"chap2":20,"chap3":30}
print(book)
# add new key:value pairs
book['chap4'] = 40
book["chap5"] = 50
print(book)
# access individual value
print(book["chap1"])
print(book["chap2"])
print(book.get("chap1"))
print(book.get("chap9"))  # None
#print(book["chap10"])

if "chap10" in book:
    print(book["chap10"])
else:
    print("key not found")

# display keys
print(book.keys())
# display values
print(book.values())
# display pairs
print(book.items())
# delete key-value
book.pop("chap1") # chap1-10 will be removed
print(book)
book.popitem()  # will remove last key-value
print(book)
# combining dictionaries
newbook = {"chap6":60,"chap7":70} #method1
finalbook = {**book,**newbook}
print(finalbook)
#method2
book.update(newbook)
print(book)





data = {
    "glossary": {
        "title": "example glossary",
		"GlossDiv": {
            "title": "S",
			"GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
                    },
					"GlossSee": "markup"
                }
            }
        }
    }
}

print(data)

#Standard Generalized Markup Language
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossTerm'])


#XML
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossDef']['GlossSeeAlso'][1])


####################################################################


colors = [
{
"colors": "red",
"values": "#f00"
},
{
"colors": "green",
"values": "#0f0"
},
{
"colors": "blue",
"values": "#00f"
},
{
"colors": "cyan",
"values": "#0ff"
},
{
"colors": "magenta",
"values": "#f0f"
},
{
"colors": "yellow",
"values": "#ff0"
},
{
"colors": "black",
"values": "#000"
}
]



write a program to display all the colors and its values.

sample output :

red #f00
green #0f0
yellow  #ff0
magenta #f0f
..
..
..



for element in colors:
    print(element['colors'],element['values'])


####################################################################

data = {
    'Sales': {
        'North': {
            'Alice': 'Manager',
            'Bob': 'Sales Executive',
            'Eve': 'Sales Coordinator',
            'John': 'Account Manager'
        },
        'South': {
            'Charlie': 'Sales Executive',
            'Grace': 'Regional Sales Manager',
            'Mallory': 'Business Development Associate'
        },
        'West': {
            'Oscar': 'Sales Executive',
            'Peggy': 'Account Executive',
            'Victor': 'Territory Sales Manager'
        }
    },
    'Marketing': {
        'Digital': {
            'David': 'SEO Specialist',
            'Hannah': 'Content Strategist',
            'Irene': 'Social Media Manager'
        },
        'Offline': {
            'Eve': 'Event Coordinator',
            'Jake': 'Brand Manager',
            'Liam': 'Public Relations Specialist'
        },
        'Research': {
            'Mia': 'Market Research Analyst',
            'Noah': 'Customer Insights Manager'
        }
    },
    'IT': {
        'Infrastructure': {
            'Quinn': 'Network Engineer',
            'Riley': 'System Administrator',
            'Sam': 'Cloud Architect'
        },
        'Development': {
            'Tina': 'Software Engineer',
            'Uma': 'Backend Developer',
            'Walter': 'Full Stack Developer'
        }
    },
    'HR': {
        'Recruitment': {
            'Yara': 'Recruitment Specialist',
            'Zane': 'Talent Acquisition Manager',
            'Nina': 'HR Coordinator'
        },
        'Employee Relations': {
            'Oliver': 'Employee Relations Specialist',
            'Sophia': 'HR Business Partner'
        }
    },
    'Finance': {
        'Accounting': {
            'Xander': 'Accountant',
            'Yvette': 'Accounts Payable Specialist',
            'Zara': 'Financial Analyst'
        },
        'Audit': {
            'Luna': 'Internal Auditor',
            'Mason': 'Compliance Officer'
        }
    }
}


write a program to display the below output:


Sales
-----
North
South
West


Marketing
--------
Digital
Offline
Research


IT
---
Infrasturcture
Development

HR
---
Recruitment
Employee Relations


for key,value in data.items():
    print(key)
    print("-------")
    for skey in value.keys():
        print(skey)
    print()


####################################################################


info = {
"id": "0001",
"type": "donut",
"name": "Cake",
"image":
{
"url": "images/0001.jpg",
"width": 200,
"height": 200
},
"thumbnail":
{
"url": "images/thumbnails/0001.jpg",
"width": 32,
"height": 32
}
}


sample output:

ID              : 0001
TYPE            : donut
NAME            : Cake
IMAGE URL       :"images/0001.jpg
IMAGE WIDTH     : 200
IMAGE HEIGHT    : 200
THUMBNAIL URL   : "images/thumbnails/0001.jpg"
THUMBNAIL WIDTH : 32
THUMBNAIL HEIGHT:  32



for key,value in info.items():
    if isinstance(value,str):
        print(key.upper().ljust(20),":",value)
    elif isinstance(value,dict):
        for skey,svalue in value.items():
            finalkey = key + " " + skey
            print(finalkey.upper().ljust(20),":",svalue)

            

####################################################################

write a program to display the below output


192.168.0.1
192.168.0.2
192.168.0.3
..
..
..
192.168.0.100

####################################################################

write a program to display the below output


192.168.0.2
192.168.0.3
..
..
..
192.168.0.10
192.168.1.1
192.168.1.2
192.168.1.3
..
..
..
192.168.1.10
####################################################################



# If the file doesnt exist.. file will be created first
# If the file is already existing with content, it overwrites

#fobj = open("C:\\new\\languages.txt","w")
#fobj = open(r"C:\languages.txt","w") # rawstring
#fobj = open("C:/new/new/languages.txt","w")
# traditional way  # regular
fobj = open("languages.txt","w")
fobj.write("python\n")
fobj.write("unix\n")
fobj.writelines(["java","spark"])
for num in range(1,10):
    fobj.write(str(num) + "\n")
fobj.close()


# pythonic way
# context manager
# if any line starts with keyword 'with'.. we call it as context manager
# Advantage: file gets closed automatically
# database connections , network connections , socket connections
with open("languages.txt","w") as fobj:
    fobj.write("python\n")
    fobj.write("unix\n")
    fobj.writelines(["java","spark"])





# reading line by line
with open("languages.txt","r") as fobj:
    for line in fobj:
        print(line.strip())
        
# reading using fobj.readlines() --> list   
with open("languages.txt","r") as fobj:
    print(fobj.readlines())

# read using fobj.read()---> string
with open("languages.txt","r") as fobj:
    print(fobj.read())
    
    
################################################################
write a program to read employeeinfo.csv and display line by line

################################################################
write a program to read employeeinfo.csv and
display workclass and education columns only
################################################################
write a program to read employeeinfo.csv and display unique workclasses

Output:
State-gov
Self-emp-not-inc
Private
 Local-gov
 ..



import csv
workset = set()
with open("employeeinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    # processing
    for line in reader:
        workclass = line[1]
        workset.add(workclass)
    # displaying
    for work in workset:
        print(work)
    
import csv
workdict  = dict()
with open("employeeinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    # processing
    for line in reader:
        workclass = line[1]
        workdict[workclass] = 1  # {"public":1,"private":1}

    # displaying
    for work in workdict:
        print(work)

################################################################
write a program to read employeeinfo.csv and display the below 

Total Male count  : 454
Total Female count: 233



import csv
mcount = 0
fcount = 0
with open("employeeinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    for record in reader:
        gender = record[9].lstrip()
        if gender == "Male":
            mcount = mcount +1
        elif gender == "Female":
            fcount = fcount + 1
    print("Total male count:", mcount)
    print("Total female count:",fcount)






import csv
genderlist = list()
with open("employeeinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    for record in reader:
        gender = record[9].lstrip()
        genderlist.append(gender)

    print("Total male count:", genderlist.count("Male"))
    print("Total female count:",genderlist.count("Female"))

################################################################



    




import csv
try:
    with open("abc1.csv","r") as fobj:
        reader = csv.reader(fobj)
        for record in reader:
            print(record)
except TypeError as error:
    print(error)
except ValueError as err:
    print(err)
except (KeyError,IndexError) as err:
    print(err)
except FileNotFoundError as err:
    print(err)
except Exception as error:  # Baseclass exception
    print("Unkown error found..",error)




###########

write a program to read employeeinfo.csv and write the columns(workclass,education ) to 29_April_2025.xlsx



import time
from openpyxl import Workbook # excel operations
import csv  # reading csv
try:
    string = time.strftime("%d_%B_%Y.xlsx")
    wb = Workbook()
    # grab the active worksheet
    ws = wb.active
    with open("employeeinfo.csv","r") as fobj:
        reader = csv.reader(fobj)
        for record in reader:
            ws.append(record)
        # Save the file
        wb.save(string)
except Exception as err:
    print(err)











####################################################################
write a program to capture 20 screenshots for every 2 seconds.

libraries:
pyautogui
pillow
pyscreenshot

####################################################################


#pip install pillow  # one single iamge
from PIL import ImageGrab  
screenshot = ImageGrab.grab()
screenshot.save('my_image.png', 'PNG')

#pip install pillow
from PIL import ImageGrab
import time
for val in range(1,20):
    filename = "image_" + str(val) + ".png"
    screenshot = ImageGrab.grab()
    time.sleep(2)
    print(filename,"generated")
    screenshot.save(filename, 'PNG')


####################################################################





################################### frequently used builtin libraries #############################

os         : os level activities
math       : mathematical operations
sys        :  sys and python config data
shutil     : copy,move, rmtree  etc
urllib     : read the web, downloading the files
logging    : logging all the events
smtplib    : sending the mails
ftplib     : performing ftp operations
sysconfig  :  sys and python config data
zipfile    : create/extract the zip files
rarfile    : create/extract the rar files
cryptopgraphy : encrypting and decrypting the data or files
tarfile    : create/extract the tar files
filecmp    : comparing files or directories
sqlite3    : python default database
csv        : reading/writing csv files
xml        : reading/writing xml files
calendar   : display month,year calendar info
datetime   : working with date n time
time       : working with date n time
fractions  : working with decimal values
glob       : display all the files
heapq      : more of array operations ( getting largest among list )
subprocess : executing system commands in python (  subprocess.getoutput("ls -ltr")
pdb        : python debugger
platform   : platform information
random     : random operations ( shuffling , random digit ... )
re         : grep + awk + sed
socket     : networking programming
stat       : stats of the file
statistics : basic statistics
pathlib	   : Object-oriented file path operations
time	     : Delays, timestamps, performance checks
logging	   : Logging for scripts/apps (replace print for real apps)
argparse	 : Command-line interface (CLI) argument parsing
configparser : 	Read/write .ini config files
json	     :Serialize/deserialize JSON (common in APIs)
uuid	     : Generate unique IDs (useful in files, databases)
statistics	:Basic stats: mean, median, stdev
random	    :Random number generation, sampling
collections	:Specialized containers (defaultdict, Counter, namedtuple)
traceback	   :Print/format exception tracebacks
warnings	   :Raise and handle warnings



##########################################################################################



write a script to create 10 directories in the current directory as below with exception handling

dir1
dir2
dir3
dir4
..
..
dir10


import os
try:
    for val in range(1,10):
        dirname = "dir" + str(val)
        if not os.path.isdir(dirname) :
            os.mkdir(dirname)
        else:
            print(dirname,"already created")
except Exception as err:
    print(err)


##########################################################################################


write a program to delete all the .py files from the current directory with exception handling


import os
try:
    files = os.listdir()
    for file in files:
        if file.endswith(".csv"):
            os.remove(file)
except Exception as err:
    print(err)

##########################################################################################

write a program to display all files and directories line by line with exception handling

##########################################################################################

write a script to perform the below operations :

1. display current working directory
2. display login name
3. display all environment variables
4. display today's date ( timestamp )
5. display April months calendar
6. display all .py files and its size in bytes
7. display the modified time of employeeinfo.csv file
8. display current process id
9. set an environment variables. ( Eg.    TEST_PATH = "C:/Users/Admin/")





import time
import datetime
import os
import calendar
# current working directory
print(os.getcwd())
# display login
print(os.getlogin())
# all environment variables
#print(os.environ)
for key,value in os.environ.items():
    print(key)
    print(value)
    print("--------")
## display todays timestamp
print(datetime.datetime.now())
print(calendar.month(2025,4))
print(calendar.calendar(2025))

#### display all the files and its size
for file in os.listdir():
    print(file.ljust(15), os.path.getsize(file),"bytes")

# get modified time of the time
for file in os.listdir():
    modifedepoch = os.path.getmtime(file) # get epoch
    # converting epoch value to understandable format
    timestamp = datetime.datetime.fromtimestamp(modifedepoch)
    print(file.ljust(20),timestamp)
    
    
    
    
##########################################################################################

write a script to display the below information ( psutil library)

1. CPU percentage
2. Memory info ( total memory, available, used)
3. process info
4. disk partitions
5. network statistics



import psutil

print(psutil.cpu_percent())

print(psutil.swap_memory())

print(psutil.virtual_memory())

print(psutil.disk_usage("C:\\"))    # windows
#print(psutil.disk_usage("/usr/bin")) # linux

print(psutil.disk_partitions())

print(psutil.net_connections())


##########################################################################################
write a program to display the below output

boot time of the system 
list of processes that are currently running and display the output
ip address
hostname


##########################################################################################

create two folders ( source , destination) in your current directory.

source folder  : copy few files to the source folder
destination folder

write a program to copy all the files from source folder to destination folder.

##########################################################################################
###### user defined arguments
####################
# fixed arguments
def display(a,b):
    c = a + b
    return c
total = display(10,20)
print(total)

# default arguments
def display(a = 0,b = 0,c = 0):
    print(a,b,c)
display()
display(10)
display(10,20)
display(10,20,30)

# keyword arguments
def display(c,a,b):
    print(a,b,c)
display(b=20,a=10,c=30)

# variable length arguments
def display(*args):
    print(type(args))
    for val in args:
        print(val)
display(10,20,30,40,6,54,65,43,6,43,4,4)

def displayinfo(**kwargs):
    for key,value in kwargs.items():
        print(key,value)
displayinfo(chap1=10 ,chap2 = 20)






#########################################
# lambda function  # pythonic way
# lambda is the single liner function
#syntax:
#functioname = lambda variables: expression
########################################
display = lambda a,b : a + b
total = display(10,20)
print(total)

display = lambda *args : sum(args)
total = display(10,20,56,4,56,43,4,4,456,43,45,433,42)
print(total)






alist = [10,20,30,40]
#[15,25,35,45]
blist = []
for val in alist:
    blist.append(val + 5)
print(blist)


#map(function,iterable)
def increment(x):
    return x+ 5
print("Using map:")
print(list(map(increment,alist)))


####### using map with lambda
increment = lambda x : x+5
print(list(map(increment,alist)))


####### using map with lambda - in same line
print(list(map(lambda x : x+5,alist)))








############################################################################
######### examples on lambda,map,filter #######
############################################################################


###########################
# 1. Basic lambda to add 10
###########################
add_10 = lambda x: x + 10
print(add_10(5))  # 15


###########################
# 2. Multiply two numbers
###########################
multiply = lambda a, b: a * b
print(multiply(3, 4))  # 12

###########################
# 3. Find maximum of two numbers
###########################
maximum = lambda x, y: x if x > y else y
print(maximum(10, 20))  # 20

###########################
# Categorize into minor or adult
###########################
age_category = lambda age: "Minor" if age < 18 else "Adult"
print(age_category(16))  # Minor

###########################
# Speed limit violation
###########################
speed_check = lambda speed: "Overspeed" if speed > 80 else "Normal"
print(speed_check(90))  # Overspeed

###########################
# 4. Check if a number is even
###########################
is_even = lambda x: x % 2 == 0
print(is_even(8))  # True

###########################
# 5. Find length of a string
###########################
length = lambda s: len(s)
print(length("hello"))  # 5

###########################
# 6. Return "Positive" or "Negative"
###########################
pos_neg = lambda x: "Positive" if x >= 0 else "Negative"
print(pos_neg(-5))  # Negative

###########################
# 7. Square a number
###########################
square = lambda x: x ** 2
print(square(6))  # 36

###########################
# 8. Cube a number
###########################
cube = lambda x: x ** 3
print(cube(3))  # 27

###########################
# 9. Get first character of a string
###########################
first_char = lambda s: s[0]
print(first_char("Python"))  # P

###########################
# 10. Combine two strings
###########################
combine = lambda s1, s2: s1 + " " + s2
print(combine("Good", "Morning"))  # Good Morning


##################################
######## using map(function,iterable)
##################################
# 11. Square all numbers in a list
nums = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x**2, nums))
print(squared)  # [1, 4, 9, 16, 25]

##################################
# 12. Convert all strings to uppercase
##################################
words = ['apple', 'banana', 'cherry']
uppercased = list(map(lambda x: x.upper(), words))
print(uppercased)  # ['APPLE', 'BANANA', 'CHERRY']

##################################
# 13. Add 5 to each number
##################################
plus_five = list(map(lambda x: x + 5, nums))
print(plus_five)  # [6, 7, 8, 9, 10]

##################################
# 14. Multiply corresponding elements from two lists
##################################
a = [2, 3, 4]
b = [5, 6, 7]
products = list(map(lambda x, y: x * y, a, b))
print(products)  # [10, 18, 28]

##################################
# 15. Convert list of numbers to their string form
##################################
numbers = [10, 20, 30]
as_strings = list(map(lambda x: str(x), numbers))
print(as_strings)  # ['10', '20', '30']

##################################
# 16. Add 2 if number is even, else add 3
##################################
adjusted = list(map(lambda x: x+2 if x%2==0 else x+3, nums))
print(adjusted)  # [4, 5, 6, 7, 8]

##################################
# 17. Replace odd numbers with 0
##################################
replace_odds = list(map(lambda x: 0 if x%2!=0 else x, nums))
print(replace_odds)  # [0, 2, 0, 4, 0]

##################################
# 18. Get first letter of each word
##################################
words = ["hello", "world", "python"]
first_letters = list(map(lambda x: x[0], words))
print(first_letters)  # ['h', 'w', 'p']

##################################
# 19. Extract domain names from emails
##################################
emails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@outlook.com']
domains = list(map(lambda x: x.split('@')[1], emails))
print(domains)  # ['gmail.com', 'yahoo.com', 'outlook.com']

##################################
# 20. Add corresponding elements if sum > 10, else 0
##################################
nums1 = [4, 5, 7]
nums2 = [8, 3, 2]
special_sum = list(map(lambda x, y: x+y if (x+y) > 10 else 0, nums1, nums2))
print(special_sum)  # [12, 0, 0]


##################################
# 21. Keep even numbers only
##################################
nums = [1, 2, 3, 4, 5, 6]
evens = list(filter(lambda x: x % 2 == 0, nums))
print(evens)  # [2, 4, 6]

##################################
# 22. Keep odd numbers only
##################################
odds = list(filter(lambda x: x % 2 != 0, nums))
print(odds)  # [1, 3, 5]

##################################
# 23. Keep numbers greater than 5
##################################
greater_than_five = list(filter(lambda x: x > 5, nums))
print(greater_than_five)  # [6]

##################################
# 24. Keep strings longer than 4 characters
##################################
words = ['cat', 'tiger', 'lion', 'elephant']
long_words = list(filter(lambda x: len(x) > 4, words))
print(long_words)  # ['tiger', 'elephant']

##################################
# 25. Keep positive numbers
##################################
numbers = [-5, -1, 0, 2, 8]
positives = list(filter(lambda x: x > 0, numbers))
print(positives)  # [2, 8]

##################################
# 26. Keep numbers divisible by both 2 and 3
##################################
nums = [3, 6, 9, 12, 15, 18]
div_2_and_3 = list(filter(lambda x: x % 2 == 0 and x % 3 == 0, nums))
print(div_2_and_3)  # [6, 12, 18]

##################################
# 27. Keep emails ending with '@gmail.com'
##################################
emails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@gmail.com']
gmail_only = list(filter(lambda x: x.endswith('@gmail.com'), emails))
print(gmail_only)  # ['user1@gmail.com', 'user3@gmail.com']

##################################
# 28. Keep numbers between 10 and 20 (inclusive)
##################################
nums = [5, 10, 15, 20, 25]
between_10_20 = list(filter(lambda x: 10 <= x <= 20, nums))
print(between_10_20)  # [10, 15, 20]

##################################
# 29. Keep names starting with 'A'
##################################
names = ['Alice', 'Bob', 'Alex', 'Brian', 'Angela']
a_names = list(filter(lambda x: x.startswith('A'), names))
print(a_names)  # ['Alice', 'Alex', 'Angela']

##################################
# 30. Keep odd numbers and square them
##################################
nums = [1, 2, 3, 4, 5]
odd_squares = list(map(lambda x: x**2, filter(lambda x: x%2!=0, nums)))
print(odd_squares)  # [1, 9, 25]









class Employee:
    def displayEmployee(self):
        print("Emp name :","rita")

emp1 = Employee()
emp1.displayEmployee()







class Employee:
    def getEmployee(self,name):
        self.name = name
    def displayEmployee(self):
        print("Employee name:",self.name)
        
emp1 = Employee()
emp1.getEmployee("rita")
emp1.displayEmployee()

emp2 = Employee()
emp2.getEmployee("ram")
emp2.displayEmployee()






operations.py
---------------

import os
import platform
def displayos():
    print(os.name)

def displaycwd():
    print(os.getcwd())

def displayuser():
    print(os.getlogin())

def getplatform():
    print(platform.platform())

# if the program is executed directly below condition becomes True
#if this program is imported to other program, below condition becomes False
if __name__ == "__main__":
    displayos()
    displaycwd()
    displayuser()
    getplatform()


test.py
--------
import operations
operations.displayos()







################ access specifiers ##################
class A:
    def __init__(self):
        self.__priv = "I am private"
        self._prot = "I am protected"
        self.pub = "I am public"
        print(self.__priv,"I am within the class")        

obj = A()
print(obj.pub)
print(obj._prot)
print(obj.__priv)
    
    
# public    : all the members defined with public can be accessible
#             anywhere in the program
# private   : member defined with private(__) can be accessible only
#             inside the class
# protected : any member defined with protected(_) can be accessed
#             in other classes as well which are inherited



operations.displayuser()




############################################################

class SampleClass:
    globalNumVariable = 3691
    globalStringVariable = "Some string.."

    b = 987 # b is a global variable
    _b = 654 # can be called as protected
    __b = 321 # private

    # constrcutor.
    def __init__(self):
        self.a = 123    # OK to access directly
        self._a = 456   # should be considered protected
        self.__a = 789  # considered private, name mangled , more secure Data

    def getSecureData(self):
        print("I am a secure data",self.__a)

    # Below method (which is inside the class) is considered as protected method(single underscore
    # is used before the method name.
    def _getProtectedData(self):
        print ("inside single underscore")
        print(self._a)

    # Below method (which is inside the class) is considered as Private method(used double underscore
    # before the method name.
    def __getMoreSecureDataMethod(self):
        print(self.__a)

if __name__ == '__main__':
    # Lets first try to create an object of SampleClass.
    objOfSampleClass = SampleClass() # object will get created here.
    m = SampleClass() # creating another object for the same class (reason : n number of obj can be created for a class)

    # just for your reference.
    print(objOfSampleClass.b)
    print(objOfSampleClass._b)
    # If you want to bring private value/variable outside the class, normally its not possible.
    # Below is going to throw an error (uncomment and execute it)
    print(objOfSampleClass.__b)

    # But if you do still, want to bring the value outside the class. then follow the below line of code.
    # using objOfSampleClass, lets call two global variables
    print(objOfSampleClass.globalNumVariable) # 3691
    print(objOfSampleClass.globalStringVariable) #

    # At the time of object creation, we are creating three variables Isn't it? (check __init__ method())
    # lets call those variable values one by one.
    print(objOfSampleClass.a)  # output is 123
    print(objOfSampleClass._a)  # output is 456
    #
    # print(objOfSampleClass.__a)  # uncomment and run this line, it will throw an error.
    #
    # # If you want to bring out the private attribute of a class, then please see the next time.
    print(objOfSampleClass._SampleClass__a)  # to access __a,
    # object._ClassName__privateVariable


    # below line contains getSecureData() - which is a public method, inside this method we are printing __a value,
    # it will work.
    print("calling a method: ", objOfSampleClass.getSecureData())
    print("calling a protected method: ", objOfSampleClass._getProtectedData())

    # # Below method has __ [two underscores], which is considered as private method here. So it cannot be called outside the class.
    # Uncomment the below line and test.
    # print("calling a method: ", m.__getMoreSecureData())

    # here we are tyring to get the method out, but it's not possible.
    print("calling a method: ", m._SampleClass__getMoreSecureData())








class Call:
    def __init__(self, id, name, phone_number, time_of_call, reason_for_call):
        self.id = id
        self.name = name
        self.phone_number = phone_number
        self.time_of_call = time_of_call
        self.reason_for_call = reason_for_call

    def display(self):
        print("ID:", self.id)
        print("Name:", self.name)
        print("Phone Number:", self.phone_number)
        print("Time of call (in HHMM format):", self.time_of_call)
        print("Reason for call:", self.reason_for_call)

class CallCenter:
    def __init__(self):
        self.calls = []
        self.queue_size = 0
    def add(self, call):
        call_list = []
        call_list.append(call.id)
        call_list.append(call.name)
        call_list.append(call.phone_number)
        call_list.append(call.time_of_call)
        call_list.append(call.reason_for_call)
        self.calls.append(call_list)
        self.queue_size += 1
        return self
    def remove(self):
        self.calls.pop(0)
        self.queue_size -= 1
        return self
    def info(self):
        print('Length of queue:', self.queue_size)
        for value in self.calls:
            print("Name:", value[1])
            print("Phone Number:", value[2])
call1 = Call(1, 'Ash', 123, 1234, 'thanks')
call1.display()
call_center = CallCenter()
call_center.add(call1)
call_center.info()
# print call_center.calls








import os
import sys
import shutil

# Define a class
class FileManager:
    def __init__(self, source_path, destination_path):
        self.source_path = source_path  # instance variable
        self.destination_path = destination_path  # instance variable

    def display_paths(self):
        """Display source and destination paths"""
        print(f"Source Path: {self.source_path}")
        print(f"Destination Path: {self.destination_path}")

    def copy_file(self):
        """Copy file from source to destination"""
        try:
            shutil.copy(self.source_path, self.destination_path)
            print(f"File copied successfully from {self.source_path} to {self.destination_path}")
        except FileNotFoundError:
            print(f"Error: Source file not found - {self.source_path}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


# Example usage
if __name__ == "__main__":
    # Create objects (instances)
    file1 = FileManager("sample.txt", "source")
    #file2 = FileManager("sample.txt", "destination")

    # Access methods
    file1.display_paths()
    file1.copy_file()

    print()

    ##file2.display_paths()
    ##file2.copy_file()








patients.py
-------------

class Patient:
    def __init__(self, id, name, allergies, bed_number=None):
        self.id = id
        self.name = name
        self.allergies = allergies
        self.bed_number = bed_number
class Hospital:
    def __init__(self, name, capacity):
        self.name = name
        self.patients = []
        self.capacity = capacity
    def add(self, patient):
        if len(self.patients) >= self.capacity:
            print('Sorry! The Hospital is full!')
        else:
            patient_dictionary = {
            'ID': patient.id,
            'Name': patient.name,
            'Allergies': patient.allergies,
            'Bed Number': patient.bed_number
            }
            self.patients.append(patient_dictionary)
            print ('{} has been admitted.'.format(patient.name))
    def discharge(self, name):
        for value in self.patients:
            if value['Name'] == name:
                value['Bed Number'] = None
                self.patients.remove(value)
patient1 = Patient(1, 'Ash', 'Wool', 1)
patient2 = Patient(1, 'Sterling', 'Chocolate', 3)
patient3 = Patient(1, 'Alish', 'Puppies', 7)
patient4 = Patient(1, 'Andre', 'Kitties', 9)
hospital = Hospital('kings Hospital', 3)
hospital.add(patient1)
hospital.add(patient2)
hospital.add(patient3)
hospital.add(patient4)
hospital.discharge('Alish')
hospital.discharge('Sterling')
hospital.add(patient4)


pip install beautifulsoup4



#####################################

from bs4 import BeautifulSoup
import requests
#step1
response = requests.get("https://www.google.com/",verify=False)

if response.status_code == 200:
    #print(response.text)
    #step2
    soup = BeautifulSoup(response.text, 'html.parser')
    for link in soup.find_all('a'):
        print(link.get('href'))
        print("-----------------")


#####################################



import requests
from bs4 import BeautifulSoup

class WebScraper:
    def __init__(self, url):
        self.url = url
        self.page_content = None

    def fetch_content(self):
        """Fetch the HTML content of the URL"""
        try:
            response = requests.get(self.url)
            if response.status_code == 200:
                self.page_content = response.text
                print(f"Successfully fetched content from: {self.url}")
            else:
                print(f"Failed to fetch page. Status Code: {response.status_code} - {self.url}")
        except Exception as e:
            print(f"Error fetching the page: {e} - {self.url}")

    def show_title(self):
        """Parse the HTML and print the title of the page"""
        if self.page_content:
            soup = BeautifulSoup(self.page_content, 'html.parser')
            title = soup.title.string if soup.title else "No title found"
            print(f"Page Title: {title}")
        else:
            print("No page content available. Please fetch content first.")

    def show_links(self):
        """Extract and print all hyperlinks from the page"""
        if self.page_content:
            soup = BeautifulSoup(self.page_content, 'html.parser')
            links = soup.find_all('a', href=True)
            for link in links:
                print(link['href'])
            else:
                print("No links found on the page.")
        else:
            print("No page content available. Please fetch content first.")


# Example usage
if __name__ == "__main__":
    urls = [
        "https://www.wikipedia.org",
        "https://www.python.org"
    ]

    for url in urls:
        print(f"\n📄 Scraping URL: {url}")
        scraper = WebScraper(url)
        scraper.fetch_content()
        scraper.show_title()
        scraper.show_links()
        print("------------------------------")









class InstanceCounter:
    count = 0
    def __init__(self, val):
        self.val = val
        InstanceCounter.count += 1

    def set_val(self, newval):
        self.val = newval

    def get_val(self):
        return self.val

    def get_count(self):
        return InstanceCounter.count
    
    
a = InstanceCounter(5)
b = InstanceCounter(10)
c = InstanceCounter(15)

for obj in (a, b, c):
    print("value of obj: {}".format(obj.get_val()))
    print("Count : {}".format(obj.get_count())) #3
    







class Employee:
   'Common base class for all employees'
   empCount = 0   # class object (or) class variable # this variable will be shared across all objects

   def __init__(self, name, salary):
      self.name = name          # instance objects
      self.salary = salary
      Employee.empCount += 1    # shared variable
 

   def displayEmployee(self):
      """ this is my documentation of displayemployee"""
      print ("Name : ", self.name,  ", Salary: ", self.salary)

# if we execute this program directly , condition is always True
# condition becomes false if this program is imported to other program
if __name__ == "__main__":
    print (Employee.__doc__) 
    emp1 = Employee("Zara", 2000)
    emp2 = Employee("Manni", 5000)
    emp3 = Employee("Ram", 7000)
    emp1.displayEmployee()
    emp2.displayEmployee()
    emp3.displayEmployee()
    print (f"Total Employees {Employee.empCount}")







############### single inheritance ###################




import random

# Base class for a slot game
class SlotMachine:
    def __init__(self, player_name):
        self.player_name = player_name
        self.balance = 1000  # Starting money

    def spin(self):
        print(f"{self.player_name} is spinning the reels... 🎰")
        symbols = ["Cherry", "Lemon", "Bell", "Seven", "Diamond"]
        result = [random.choice(symbols) for _ in range(3)]
        print(f"Spin Result: {result}")
        self.check_win(result)

    def check_win(self, result):
        if result.count(result[0]) == 3:
            print(f"JACKPOT!!! All {result[0]}s! You win $500!")
            self.balance += 500
        elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
            print("Small Win! You win $100!")
            self.balance += 100
        else:
            print("No win. You lose $50.")
            self.balance -= 50

        print(f"Current Balance: ${self.balance}")

# Derived class with Bonus Game feature
class BonusSlotMachine(SlotMachine):
    def __init__(self, player_name):
        super().__init__(player_name)  #base class constructor

    def bonus_round(self):
        print(f"{self.player_name} triggered BONUS ROUND! ")
        bonus_win = random.randint(100, 1000)
        print(f"You win an additional bonus of ${bonus_win}!")
        self.balance += bonus_win
        print(f"New Balance after bonus: ${self.balance}")

# Example gameplay
if __name__ == "__main__":
    # Create player
    player = BonusSlotMachine("Alice")

    # Gameplay sequence
    player.spin()
    player.spin()
    player.bonus_round()
    player.spin()




############### multiple inheritance ###################

import random

# Base class
class SlotMachine:
    def __init__(self, player_name):
        self.player_name = player_name
        self.balance = 1000

    def spin(self):
        print(f"{self.player_name} spins the machine...")
        symbols = ["Cherry", "Lemon", "Bell", "Seven", "Diamond"]
        result = [random.choice(symbols) for _ in range(3)]
        print(f"Result: {result}")
        self.check_win(result)

    def check_win(self, result):
        if result.count(result[0]) == 3:
            print("JACKPOT! You win $500")
            self.balance += 500
        elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
            print("Small Win! You win $100")
            self.balance += 100
        else:
            print("You lost $50")
            self.balance -= 50
        print(f"Balance: ${self.balance}")

# Another base class
class LoyaltyProgram:
    def __init__(self):
        self.points = 0

    def add_points(self, amount):
        self.points += amount
        print(f"Loyalty Points Earned: {amount}, Total: {self.points}")

# Derived class using multiple inheritance
class VIPSlotMachine(SlotMachine, LoyaltyProgram):
    def __init__(self, player_name):
        SlotMachine.__init__(self, player_name)
        LoyaltyProgram.__init__(self)

    def spin(self):
        print("VIP Spin Activated! 💎")
        super().spin()
        self.add_points(20)

# Usage
print("\n--- Multiple Inheritance Example ---")
vip_player = VIPSlotMachine("Bob")
vip_player.spin()
vip_player.spin()



############### multilevel inheritance ###################



import random
# Base class
class SlotMachine:
    def __init__(self, player_name):
        self.player_name = player_name
        self.balance = 1000

    def spin(self):
        print(f"{self.player_name} is spinning the slot...")
        symbols = ["Cherry", "Lemon", "Bell", "Seven", "Diamond"]
        result = [random.choice(symbols) for _ in range(3)]
        print(f"Result: {result}")
        self.check_win(result)

    def check_win(self, result):
        if result.count(result[0]) == 3:
            print("JACKPOT! You win $500")
            self.balance += 500
        elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
            print("Small Win! You win $100")
            self.balance += 100
        else:
            print("You lost $50")
            self.balance -= 50
        print(f"Balance: ${self.balance}")

# First-level derived class
class BonusSlotMachine(SlotMachine):
    def bonus_round(self):
        print("Bonus Round Unlocked!")
        bonus = random.randint(100, 1000)
        print(f"You win ${bonus} in bonus!")
        self.balance += bonus
        print(f"New Balance: ${self.balance}")

# Second-level derived class
class SuperBonusSlotMachine(BonusSlotMachine):
    def lucky_draw(self):
        print("Lucky Draw Activated!")
        prize = random.choice(["Car", "iPhone", "Vacation", "$1000"])
        print(f"You won a {prize}!")

# Usage
print("\n--- Multilevel Inheritance Example ---")
super_player = SuperBonusSlotMachine("Carol")
super_player.spin()
super_player.bonus_round()
super_player.lucky_draw()


############### hierarical inheritance ###################



import random
# Base class
class SlotMachine:
    def __init__(self, player_name):
        self.player_name = player_name
        self.balance = 1000

    def spin(self):
        print(f"{self.player_name} spins the reels...")
        symbols = ["Cherry", "Lemon", "Bell", "Seven", "Diamond"]
        result = [random.choice(symbols) for _ in range(3)]
        print(f"Result: {result}")
        self.check_win(result)

    def check_win(self, result):
        if result.count(result[0]) == 3:
            print("JACKPOT! You win $500")
            self.balance += 500
        elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
            print("Small Win! You win $100")
            self.balance += 100
        else:
            print("You lost $50")
            self.balance -= 50
        print(f"Balance: ${self.balance}")

# Child class 1
class FreeSpinSlot(SlotMachine):
    def free_spin(self):
        print("You've earned a FREE SPIN!")
        self.spin()

# Child class 2
class JackpotSlot(SlotMachine):
    def mega_jackpot(self):
        print("MEGA JACKPOT! You win $5000!")
        self.balance += 5000
        print(f"Updated Balance: ${self.balance}")

# Usage
print("\n--- Hierarchical Inheritance Example ---")
free_spin_player = FreeSpinSlot("Diana")
free_spin_player.spin()
free_spin_player.free_spin()

jackpot_player = JackpotSlot("Ethan")
jackpot_player.spin()
jackpot_player.mega_jackpot()










"""
Topic: Abstraction and Abstract Base Classes
This example demonstrates abstraction and abstract base classes in Python with clear comments.

What is Abstraction in simple terms?
Abstraction means hiding the details and showing only the necessary parts.

"You don’t need to know how the engine works, just know you can start it."
ABC: Means "Abstract Base Class". You cannot create an object of this class.

@abstractmethod: Any class that inherits Vehicle must define start_engine.
Vehicle like a template 

"""

from abc import ABC, abstractmethod

# Abstract class
class Vehicle(ABC):
    @abstractmethod
    def start_engine(self):
        pass  # Force subclasses to implement this method

# Concrete class
class Car(Vehicle):
    def start_engine(self):
        print("Car engine started!")

# Concrete class
class Bike(Vehicle):
    def start_engine(self):
        print("Bike engine started!")

# Cannot instantiate Vehicle directly
# v = Vehicle()  # Error

car = Car()
bike = Bike()

car.start_engine()
bike.start_engine()











#########################################################################
#Basically, a decorator takes in a function, 
#adds some functionality and returns it.
#########################################################################
#Python has a syntax to simplify this.
#We can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated.

def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner

@make_pretty
def ordinary():
    print("I am ordinary")

ordinary()
##########################################################







#parameters of the nested inner() function inside the decorator is the same as the parameters of functions it decorates. 
def smart_divide(func):
    def inner(a, b):
        print("I am going to divide", a, "and", b)
        if b == 0:
            print("Whoops! cannot divide")
            return
        return func(a, b)
    return inner

@smart_divide
def divide(a, b):
    print(a/b)
    
divide(2,5)
divide(2,0)


##########################################################


###############################
#Chaining Decorators in Python
def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner
def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner
@star
@percent
def printer(msg):
    print(msg)

printer("Hello")




##########################################################
import time
def timeit(func):
    def wrapper(*args, **kwargs):
        print("Tracking function: " + func.__name__ + "()")
        start = time.time()
        func(*args, **kwargs)
        end = time.time()
        print("Time taken by the function to run is " + str(end-start))
    return wrapper
@timeit
def looper(*args, **kwargs):
    print(f"args = {args}")
    print(f"kwargs = {kwargs}")
    
    for loop in kwargs.values():  #[10,11,12,15]
        for i in range(loop):
            return i

looper(2, 3, 4, loop1=10, loop2=11, loop3=12, loop4=15)


##########################################################



timecount.py
-----------
import time
def timeit(func):
    def wrapper(*args, **kwargs):
        print("Tracking function: " + func.__name__ + "()")
        start = time.time()
        func(*args, **kwargs)
        end = time.time()
        print("Time taken by the function to run is " + str(end-start))
    return wrapper
    
    
  
testfunction.py
--------------
import time
import timecount

@timecount.timeit
def looper(*args, **kwargs):
    print(f"args = {args}")
    print(f"kwargs = {kwargs}")
    
    for loop in kwargs.values():  #[10,11,12,15]
        for i in range(loop):
            return i

looper(2, 3, 4, loop1=10, loop2=11, loop3=12, loop4=15)
    
    
    





https://huggingface.co/




#############################

from huggingface_hub import InferenceClient
from PIL import Image  # pip install pillow
import io
import os

HF_TOKEN = "your token"

# ⚙️ Initialize inference client
client = InferenceClient( model="Salesforce/blip-image-captioning-base", token=HF_TOKEN )

# Load image and convert to bytes
img = Image.open("students1.png").convert("RGB")
buffer = io.BytesIO()
img.save(buffer, format="JPEG")
#buffer.seek(0)
buffer = buffer.getvalue()


# Generate caption
caption = client.image_to_text(image=buffer)
print("Generated Caption:", caption)


######################################





https://github.com/giridhar276/lightnwonder/raw/refs/heads/main/pillow_image_processing.zip


step1:
-------
create .env file in your current directory
----------------------------------------
HF_TOKEN=your hugginface token



step2:
------
pip install python-dotenv



step3:
--------


program
--------
from huggingface_hub import InferenceClient
import os
from dotenv import load_dotenv

# Load token from .env
load_dotenv()
HF_TOKEN = os.getenv("HF_TOKEN")  #pip install python-dotenv

# Use a supported model
client = InferenceClient(
    model="stabilityai/stable-diffusion-xl-base-1.0",  # Supported!
    token=HF_TOKEN
)

# Define your prompt
prompt = "small baby sitting and laughing"

# Generate image
image = client.text_to_image(prompt=prompt, guidance_scale=7.5, num_inference_steps=50)

# Save the image
image.save("baby.png")
print("Image saved as 'dragon_city1.png'")





from huggingface_hub import InferenceClient
import os
from dotenv import load_dotenv

load_dotenv()
HF_TOKEN = os.getenv("HF_TOKEN")
client = InferenceClient(model="impira/layoutlm-document-qa", token=HF_TOKEN)

question = "What is the invoice number?"
with open("./document_question_answering/invoice_sample.png", "rb") as f:
    result = client.document_question_answering(image=f, question=question)
    print("Answer:", result)









